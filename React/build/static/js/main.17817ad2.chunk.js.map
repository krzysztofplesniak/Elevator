{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/Header.js","components/ElevatorDisplay.js","components/Elevator.js","components/ElevatorHistory.js","components/RemotePanel.js","App.js","index.js"],"names":["state","action","type","loading","elevators","payload","expectedTime","elevatorIsMoving","elvId","isMoving","elevatorHistory","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","useEffect","process","PORT","localPath","EventSource","onmessage","evt","JSON","parse","data","id","floor","targetFloor","parseInt","slice","setElevatorHistory","getElevators","newElevatorHistory","expectedTimeforElevator","Math","abs","a","fetch","response","json","Provider","value","loadig","callElevator","elevatorID","axios","put","elevatorUp","console","log","elevatorDown","className","Header","useContext","ElevatorDisplay","elevator1","elevator2","elevator3","length","digit","color","opacitySegment","toUpperCase","Elevator","elevator","ElevatorHistory","lastElevatorHistory","map","key","uuid","RemotePanel","buttonDigit","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17817ad2.chunk.js","sourcesContent":["export default (state, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase 'GET_ELEVATORS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t\televators: action.payload,\r\n\t\t\t};\r\n\t\t\t\r\n\t\tcase 'EXPECTED_TIME':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\texpectedTime: action.payload,\r\n\t\t\t};\r\n\r\n\t\tcase 'ELEVATOR_IS_MOVING':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\televatorIsMoving: { elvId: action.payload, isMoving: true },\r\n\t\t\t};\r\n\r\n\t\tcase 'ELEVATOR_IS_STOPPED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\televatorIsMoving: { elvId: 0, isMoving: false },\r\n\t\t\t\texpectedTime: null,\r\n\t\t\t};\r\n\r\n\t\tcase 'SET_ELEVATOR_HISTORY':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\televatorHistory: [...state.elevatorHistory, action.payload],\r\n\t\t\t};\r\n\r\n\t\tcase 'CALL_ELEVATOR':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t};\r\n\r\n\t\tcase 'ELEVATOR_UP':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t};\r\n\r\n\t\tcase 'ELEVATOR_DOWN':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t};\r\n\t\t\r\n\t\t// it could nbe in another part of context in next edition od app\r\n\t\tcase 'GET_ELEVATORS_ERORR':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React, { useEffect, createContext, useReducer } from 'react';\r\n//const dotenv = require(\"dotenv\");\r\n//dotenv.config({path: './config.env'});\r\nimport axios from 'axios';\r\nimport AppReducer from './AppReducer';\r\n\r\n// Initial state of app\r\nconst initialState = {\r\n\televators: [],\r\n\televatorIsMoving: { elvId: 0, isMoving: false },\r\n\texpectedTime: null,\r\n\televatorHistory: [],\r\n\tloading: true,\r\n\terror: null,\r\n};\r\n\r\n// Create context by useHook\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// GlobalProvider component state\r\nexport const GlobalProvider = ({ children }) => {\r\n\tconst [state, dispatch] = useReducer(AppReducer, initialState);\r\n\t\r\n\t\r\n\t// Subscribe SSE event message \"move\"\r\n\tuseEffect(() => {\r\n\t\tconst port = process.env.PORT || 8080;\r\n\t\tconst env = process.env.NODE_ENV;\r\n\t\tlet localPath = null;\t\r\n\r\n\t\tif (env === 'development') {\r\n\t\t\tlocalPath = `http://localhost:${port}`;\t\r\n\t\t\t// console.log('localPath ', localPath);\r\n\t\t\t// console.log('env ', env );\r\n\t\t} \r\n\t\t\t\t\r\n\t\tconst eventSource = new EventSource(`${localPath}/stream`);\r\n\r\n\t\teventSource.onmessage = evt => {\r\n\t\t\tconst { id, floor, state, targetFloor } = JSON.parse(evt.data);\r\n\r\n\t\t\tif (state === 'up' || state === 'down') {\r\n\t\t\t\tdispatch({ type: 'ELEVATOR_IS_MOVING', payload: parseInt(id.slice(3, 4)) + 1});\r\n\t\t\t} else {\r\n\t\t\t\tdispatch({ type: 'ELEVATOR_IS_STOPPED' });\r\n\t\t\t}\r\n\r\n\t\t\tconst newElevatorHistory = ({ id, floor, state, targetFloor });\r\n\r\n\t\t\tsetElevatorHistory(newElevatorHistory);\r\n\t\t\texpectedTime(targetFloor, floor);\r\n\t\t\tgetElevators();\r\n\t\t};\r\n\t}, []);\r\n\r\n\t// Helpers/utils methods\r\n\tconst setElevatorHistory = newElevatorHistory => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'SET_ELEVATOR_HISTORY',\r\n\t\t\tpayload: newElevatorHistory,\r\n\t\t});\r\n\t};\r\n\r\n\t//Counting expected time arrival the elevator  \r\n\tconst expectedTime = (targetFloor, floor) => {\r\n\t\tif (targetFloor) {\r\n\r\n\t\t\tconst expectedTimeforElevator = Math.abs(targetFloor - floor) + 1;\r\n\t\r\n\t\t\tif (expectedTimeforElevator) {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: 'EXPECTED_TIME',\r\n\t\t\t\t\tpayload: expectedTimeforElevator,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Actions dispatcher helpers for menage state of application\r\n\t// get information about status of elevator from backend\r\n\tconst getElevators = async () => {\r\n\t\tconst response = await fetch('/elevators');\r\n\t\tconst elevators = await response.json();\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: 'GET_ELEVATORS',\r\n\t\t\tpayload: elevators,\r\n\t\t});\r\n\t};\r\n\r\n\t// calling 'free\" elevator by clicking the button on particular level/stage in building\r\n\tconst callElevator = elevatorID => {\r\n\t\t\t\t\r\n\t\taxios.put(`/floor/${elevatorID}`);\r\n\t\t\r\n\t\tdispatch({\r\n\t\t\ttype: 'CALL_ELEVATOR',\r\n\t\t\tpayload: elevatorID\r\n\t\t});\r\n\t};\r\n\r\n\t// methods for menage elevator when user is inside \r\n\tconst elevatorUp = () => {\r\n\t\tconsole.log(`Button UP`);\r\n\t\tdispatch({\r\n\t\t\ttype: 'ELEVATOR_UP',\r\n\t\t});\r\n\t};\r\n\r\n\tconst elevatorDown = () => {\r\n\t\tconsole.log(`Button DOWN`);\r\n\t\tdispatch({\r\n\t\t\ttype: 'ELEVATOR_DOWN',\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GlobalContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\televators: state.elevators,\r\n\t\t\t\texpectedTime: state.expectedTime,\r\n\t\t\t\televatorIsMoving: state.elevatorIsMoving,\r\n\t\t\t\televatorHistory: state.elevatorHistory,\r\n\t\t\t\tloadig: state.loading,\r\n\t\t\t\terror: state.error,\r\n\t\t\t\tgetElevators,\r\n\t\t\t\tcallElevator,\r\n\t\t\t\televatorUp,\r\n\t\t\t\televatorDown\r\n\t\t\t}}>\r\n\t\t\t<div className='container'>{children}</div>\r\n\t\t</GlobalContext.Provider>\r\n\t);\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Header = () => {\r\n\tconst {\r\n\t\texpectedTime,\r\n\t\televatorIsMoving: { isMoving },\r\n\t} = useContext(GlobalContext);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1>SkyTower Wrocław</h1>\r\n\t\t\t{isMoving ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h2>\r\n\t\t\t\t\t\t<span>{`Expected time ${expectedTime} `}</span>\r\n\t\t\t\t\t\t{expectedTime === 1 ? 'second' : 'seconds'}\r\n\t\t\t\t\t</h2>\r\n\t\t\t\t</>\r\n\t\t\t) : (\r\n\t\t\t\t<h2>Elevator is waiting ...</h2>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { DigitalDigit } from 'digital-digit';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const ElevatorDisplay = () => {\r\n\tconst { elevators, loading, getElevators, elevatorIsMoving: { elvId, isMoving } } = useContext(GlobalContext);\r\n\tconst [ elevator1, elevator2, elevator3 ] = elevators;\r\n\r\n\tuseEffect(() => {\r\n\t\tgetElevators();\r\n\t\t// eslint-disable-next-line\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{!loading && elevators.length > 0 && (\r\n\t\t\t\t<div className='elevatorDisplay'>\r\n\t\t\t\t\t<div className='elevatorDisplay__panel'>\r\n\t\t\t\t\t\t<div className='elevatorDisplay__digitalDigit'>\r\n\t\t\t\t\t\t\t<DigitalDigit\r\n\t\t\t\t\t\t\t\tdigit={elevator1.floor}\r\n\t\t\t\t\t\t\t\tcolor={(elvId === 1 && isMoving) ? 'red' : 'green'}\r\n\t\t\t\t\t\t\t\topacitySegment={0.5}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className='elevatorDisplay__info'>\r\n\t\t\t\t\t\t\t{elevator1.state.toUpperCase()}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='elevatorDisplay__panel'>\r\n\t\t\t\t\t\t<div className='elevatorDisplay__digitalDigit'>\r\n\t\t\t\t\t\t\t<DigitalDigit\r\n\t\t\t\t\t\t\t\tdigit={elevator2.floor}\r\n\t\t\t\t\t\t\t\tcolor={(elvId === 2 && isMoving) ? 'red' : 'green'}\t\t\t\t\t\t\t\topacitySegment={0.5}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className='elevatorDisplay__info'>\r\n\t\t\t\t\t\t\t{elevator2.state.toUpperCase()}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='elevatorDisplay__panel'>\r\n\t\t\t\t\t\t<div className='elevatorDisplay__digitalDigit'>\r\n\t\t\t\t\t\t\t<DigitalDigit\r\n\t\t\t\t\t\t\t\tdigit={elevator3.floor}\r\n\t\t\t\t\t\t\t\tcolor={(elvId === 3 && isMoving) ? 'red' : 'green'}\r\n\t\t\t\t\t\t\t\topacitySegment={0.5}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className='elevatorDisplay__info'>\r\n\t\t\t\t\t\t\t{elevator3.state.toUpperCase()}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\r\n\r\nexport const Elevator = ({ elevator: { id, floor, state, targetFloor } }) => {\r\n\treturn (\r\n\t\t<div className='elevatorList__element'>\r\n\t\t\t<div className='elevatorList__element--span'>\r\n\t\t\t\tElevator\r\n\t\t\t\t<span className='elevatorList__element--bold'>\r\n\t\t\t\t\t{parseInt(id.slice(3, 4)) + 1}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div className='elevatorList__element--span'>\r\n\t\t\t\tFloor #<span className='elevatorList__element--bold'>{floor}</span>\r\n\t\t\t</div>\r\n\t\t\t<div className='elevatorList__element--targetFloor '>\r\n\t\t\t\tTarget floor #\r\n\t\t\t\t<span className='elevatorList__element--bold'>{targetFloor}</span>\r\n\t\t\t</div>\r\n\t\t\t<div className='elevatorList__element--direction'>\r\n\t\t\t\t<span>{state.toUpperCase()}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Elevator } from './Elevator';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const ElevatorHistory = () => {\r\n\tconst { elevatorHistory } = useContext(GlobalContext);\r\n\r\n\t// @desc Reduce length of history to last 7 position\r\n\tlet lastElevatorHistory = null;\r\n\r\n\tif (elevatorHistory.length > 6) {\r\n\t\tlastElevatorHistory = elevatorHistory.slice(elevatorHistory.length - 7,elevatorHistory.length);\r\n\t} else lastElevatorHistory = elevatorHistory;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>History of elevators calling</h3>\r\n\t\t\t<div className='elevatorList'>\r\n\t\t\t\t{lastElevatorHistory.map(elevator => (\r\n\t\t\t\t\t<Elevator key={uuid()} elevator={elevator} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { DigitalDigit } from 'digital-digit';\r\n\r\nexport const RemotePanel = () => {\r\n\tconst { callElevator } = useContext(GlobalContext);\r\n\r\n\tconst elevatorButton = elevatorID => {\r\n\t\tcallElevator(elevatorID);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>Remote panel</h3>\r\n\t\t\t<div className='remotePanel'>\r\n\t\t\t\t{[1, 2, 3, 4, 5, 6, 7, 8].map(buttonDigit => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={buttonDigit}\r\n\t\t\t\t\t\tclassName='remotePanel__control'\r\n\t\t\t\t\t\tonClick={() => elevatorButton(buttonDigit)}>\r\n\t\t\t\t\t\t<DigitalDigit digit={buttonDigit} color='blue' opacitySegment={0.5} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Header } from './components/Header';\r\nimport { ElevatorDisplay } from './components/ElevatorDisplay';\r\nimport { ElevatorHistory } from './components/ElevatorHistory';\r\nimport { RemotePanel } from './components/RemotePanel';\r\n\r\nimport { GlobalProvider } from './context/GlobalState';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <Header />\r\n      <ElevatorDisplay />\r\n      <RemotePanel />\r\n      <ElevatorHistory />\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}